{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-hex Welcome! Prefect integrations for interacting with Hex. Hex is a powerful platform for collaborative data science and analytics. For information getting started with Hex, check out Hex's quickstart guide . The tasks within this collection were created by a code generator using Hex's OpenAPI spec. Hex's REST API documentation can be found here . Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-hex with pip : pip install prefect-hex Then, register to view the block on Prefect Cloud: prefect block register -m prefect_hex Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI . Gather and store authentication Create new token on https://app.hex.tech/ Settings page: Store token on https://app.prefect.cloud/ Blocks page: Copy project ID from browser URL (in red): Write and run a flow Trigger a Hex project run and wait for completion from prefect import flow from prefect_hex import HexCredentials from prefect_hex.project import trigger_project_run_and_wait_for_completion @flow def trigger_project_run_and_wait_for_completion_flow ( project_id : str ): hex_credentials = HexCredentials . load ( \"hex-token\" ) project_metadata = trigger_project_run_and_wait_for_completion ( project_id = project_id , hex_credentials = hex_credentials ) return project_metadata trigger_project_run_and_wait_for_completion_flow ( project_id = \"012345c6-b67c-1234-1b2c-66e4ad07b9f3\" ) Run project, get status, cancel run, and get list of projects from prefect import flow from prefect_hex import HexCredentials from prefect_hex.project import ( get_project_runs , run_project , get_run_status , cancel_run , ) @flow def example_hex_flow (): # load stored credentials hex_credentials = HexCredentials . load ( \"hex-token\" ) # run project project_id = '5a8591dd-4039-49df-9202-96385ba3eff8' , project_run = run_project ( project_id = project_id , hex_credentials = hex_credentials ) # get status run_id = project_run . run_id project_run_status = get_run_status ( project_id = project_id , run_id = run_id , hex_credentials = hex_credentials ) print ( project_run_status . run_url ) # cancel run if needed cancel_run ( project_id = project_id , run_id = run_id , hex_credentials = hex_credentials ) # get list of project runs project_runs = get_project_runs ( project_id = project_id , hex_credentials = hex_credentials ) return project_runs example_hex_flow () Resources Blog Posts Create Observable and Reproducible Notebooks with Hex by Khuyen Tran Videos Create Observable and Reproducible Notebooks with Hex: Why Hex (Part 1) If you encounter any bugs while using prefect-hex , feel free to open an issue in the prefect-hex repository. If you have any questions or issues while using prefect-hex , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-hex for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-hex.git cd prefect-hex/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-hex","text":"","title":"prefect-hex"},{"location":"#welcome","text":"Prefect integrations for interacting with Hex. Hex is a powerful platform for collaborative data science and analytics. For information getting started with Hex, check out Hex's quickstart guide . The tasks within this collection were created by a code generator using Hex's OpenAPI spec. Hex's REST API documentation can be found here .","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-hex with pip : pip install prefect-hex Then, register to view the block on Prefect Cloud: prefect block register -m prefect_hex Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI .","title":"Installation"},{"location":"#gather-and-store-authentication","text":"Create new token on https://app.hex.tech/ Settings page: Store token on https://app.prefect.cloud/ Blocks page: Copy project ID from browser URL (in red):","title":"Gather and store authentication"},{"location":"#write-and-run-a-flow","text":"","title":"Write and run a flow"},{"location":"#trigger-a-hex-project-run-and-wait-for-completion","text":"from prefect import flow from prefect_hex import HexCredentials from prefect_hex.project import trigger_project_run_and_wait_for_completion @flow def trigger_project_run_and_wait_for_completion_flow ( project_id : str ): hex_credentials = HexCredentials . load ( \"hex-token\" ) project_metadata = trigger_project_run_and_wait_for_completion ( project_id = project_id , hex_credentials = hex_credentials ) return project_metadata trigger_project_run_and_wait_for_completion_flow ( project_id = \"012345c6-b67c-1234-1b2c-66e4ad07b9f3\" )","title":"Trigger a Hex project run and wait for completion"},{"location":"#run-project-get-status-cancel-run-and-get-list-of-projects","text":"from prefect import flow from prefect_hex import HexCredentials from prefect_hex.project import ( get_project_runs , run_project , get_run_status , cancel_run , ) @flow def example_hex_flow (): # load stored credentials hex_credentials = HexCredentials . load ( \"hex-token\" ) # run project project_id = '5a8591dd-4039-49df-9202-96385ba3eff8' , project_run = run_project ( project_id = project_id , hex_credentials = hex_credentials ) # get status run_id = project_run . run_id project_run_status = get_run_status ( project_id = project_id , run_id = run_id , hex_credentials = hex_credentials ) print ( project_run_status . run_url ) # cancel run if needed cancel_run ( project_id = project_id , run_id = run_id , hex_credentials = hex_credentials ) # get list of project runs project_runs = get_project_runs ( project_id = project_id , hex_credentials = hex_credentials ) return project_runs example_hex_flow ()","title":"Run project, get status, cancel run, and get list of projects"},{"location":"#resources","text":"","title":"Resources"},{"location":"#blog-posts","text":"Create Observable and Reproducible Notebooks with Hex by Khuyen Tran","title":"Blog Posts"},{"location":"#videos","text":"Create Observable and Reproducible Notebooks with Hex: Why Hex (Part 1) If you encounter any bugs while using prefect-hex , feel free to open an issue in the prefect-hex repository. If you have any questions or issues while using prefect-hex , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Videos"},{"location":"#development","text":"If you'd like to install a version of prefect-hex for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-hex.git cd prefect-hex/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"credentials/","text":"prefect_hex.credentials Credential classes used to perform authenticated interactions with Hex HexCredentials pydantic-model Block used to manage Hex authentication. Attributes: Name Type Description domain str Domain to make API requests against. token SecretStr The token to authenticate with Hex. Examples: Load stored Hex credentials: from prefect_hex import HexCredentials hex_credentials_block = HexCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_hex/credentials.py class HexCredentials ( Block ): \"\"\" Block used to manage Hex authentication. Attributes: domain: Domain to make API requests against. token: The token to authenticate with Hex. Examples: Load stored Hex credentials: ```python from prefect_hex import HexCredentials hex_credentials_block = HexCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Hex Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/3biMverMLGiDA7y5fkqKZF/4b7747052b59fa8182a9686b88ea9541/Hex_Purple__for_light_backgrounds_.png?h=250\" # noqa domain : str = Field ( default = \"app.hex.tech\" , description = \"Domain to make API requests against.\" ) token : SecretStr = Field ( default =... , description = \"Token used for authentication.\" ) def get_client ( self ) -> AsyncClient : \"\"\" Gets a Hex REST AsyncClient. Returns: A Hex REST AsyncClient. Example: Gets a Hex REST AsyncClient. ```python from prefect import flow from prefect_hex import HexCredentials @flow def example_get_client_flow(): token = \"consumer_key\" hex_credentials = HexCredentials(token=token) client = hex_credentials.get_client() return client example_get_client_flow() ``` \"\"\" client_kwargs = { \"base_url\" : f \"https:// { self . domain } /api/v1\" , \"headers\" : { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" }, } client = AsyncClient ( ** client_kwargs ) return client domain : str pydantic-field Domain to make API requests against. token : SecretStr pydantic-field required Token used for authentication. get_client Gets a Hex REST AsyncClient. Returns: Type Description AsyncClient A Hex REST AsyncClient. Examples: Gets a Hex REST AsyncClient. from prefect import flow from prefect_hex import HexCredentials @flow def example_get_client_flow (): token = \"consumer_key\" hex_credentials = HexCredentials ( token = token ) client = hex_credentials . get_client () return client example_get_client_flow () Source code in prefect_hex/credentials.py def get_client ( self ) -> AsyncClient : \"\"\" Gets a Hex REST AsyncClient. Returns: A Hex REST AsyncClient. Example: Gets a Hex REST AsyncClient. ```python from prefect import flow from prefect_hex import HexCredentials @flow def example_get_client_flow(): token = \"consumer_key\" hex_credentials = HexCredentials(token=token) client = hex_credentials.get_client() return client example_get_client_flow() ``` \"\"\" client_kwargs = { \"base_url\" : f \"https:// { self . domain } /api/v1\" , \"headers\" : { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" }, } client = AsyncClient ( ** client_kwargs ) return client","title":"Credentials"},{"location":"credentials/#prefect_hex.credentials","text":"Credential classes used to perform authenticated interactions with Hex","title":"credentials"},{"location":"credentials/#prefect_hex.credentials.HexCredentials","text":"Block used to manage Hex authentication. Attributes: Name Type Description domain str Domain to make API requests against. token SecretStr The token to authenticate with Hex. Examples: Load stored Hex credentials: from prefect_hex import HexCredentials hex_credentials_block = HexCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_hex/credentials.py class HexCredentials ( Block ): \"\"\" Block used to manage Hex authentication. Attributes: domain: Domain to make API requests against. token: The token to authenticate with Hex. Examples: Load stored Hex credentials: ```python from prefect_hex import HexCredentials hex_credentials_block = HexCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Hex Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/3biMverMLGiDA7y5fkqKZF/4b7747052b59fa8182a9686b88ea9541/Hex_Purple__for_light_backgrounds_.png?h=250\" # noqa domain : str = Field ( default = \"app.hex.tech\" , description = \"Domain to make API requests against.\" ) token : SecretStr = Field ( default =... , description = \"Token used for authentication.\" ) def get_client ( self ) -> AsyncClient : \"\"\" Gets a Hex REST AsyncClient. Returns: A Hex REST AsyncClient. Example: Gets a Hex REST AsyncClient. ```python from prefect import flow from prefect_hex import HexCredentials @flow def example_get_client_flow(): token = \"consumer_key\" hex_credentials = HexCredentials(token=token) client = hex_credentials.get_client() return client example_get_client_flow() ``` \"\"\" client_kwargs = { \"base_url\" : f \"https:// { self . domain } /api/v1\" , \"headers\" : { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" }, } client = AsyncClient ( ** client_kwargs ) return client","title":"HexCredentials"},{"location":"credentials/#prefect_hex.credentials.HexCredentials.domain","text":"Domain to make API requests against.","title":"domain"},{"location":"credentials/#prefect_hex.credentials.HexCredentials.token","text":"Token used for authentication.","title":"token"},{"location":"credentials/#prefect_hex.credentials.HexCredentials.get_client","text":"Gets a Hex REST AsyncClient. Returns: Type Description AsyncClient A Hex REST AsyncClient. Examples: Gets a Hex REST AsyncClient. from prefect import flow from prefect_hex import HexCredentials @flow def example_get_client_flow (): token = \"consumer_key\" hex_credentials = HexCredentials ( token = token ) client = hex_credentials . get_client () return client example_get_client_flow () Source code in prefect_hex/credentials.py def get_client ( self ) -> AsyncClient : \"\"\" Gets a Hex REST AsyncClient. Returns: A Hex REST AsyncClient. Example: Gets a Hex REST AsyncClient. ```python from prefect import flow from prefect_hex import HexCredentials @flow def example_get_client_flow(): token = \"consumer_key\" hex_credentials = HexCredentials(token=token) client = hex_credentials.get_client() return client example_get_client_flow() ``` \"\"\" client_kwargs = { \"base_url\" : f \"https:// { self . domain } /api/v1\" , \"headers\" : { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" }, } client = AsyncClient ( ** client_kwargs ) return client","title":"get_client()"},{"location":"project/","text":"prefect_hex.project This is a module containing tasks for interacting with Hex projects cancel_run async Cancel a project run. Parameters: Name Type Description Default project_id str Project ID associated with the run to cancel. required run_id str Run ID of the run to cancel. required hex_credentials HexCredentials Credentials to use for authentication with Hex. required Source code in prefect_hex/project.py @task async def cancel_run ( project_id : str , run_id : str , hex_credentials : HexCredentials , ) -> None : # pragma: no cover \"\"\" Cancel a project run. Args: project_id: Project ID associated with the run to cancel. run_id: Run ID of the run to cancel. hex_credentials: Credentials to use for authentication with Hex. \"\"\" # noqa endpoint = f \"/project/ { project_id } /run/ { run_id } \" # noqa response = await execute_endpoint . fn ( endpoint , hex_credentials , http_method = HTTPMethod . DELETE , ) # Handles any errors returned by the API _unpack_contents ( response ) get_project_runs async Get the status of the API-triggered runs of a project. Parameters: Name Type Description Default project_id str Project ID to get runs for. required hex_credentials HexCredentials Credentials to use for authentication with Hex. required limit Optional[prefect_hex.models.project.PageSize] Number of results to fetch per page for paginated requests. None offset Optional[prefect_hex.models.project.Offset] Offset for paginated requests. None status_filter Optional[prefect_hex.models.project.ProjectRunStatus] Current status of a project run. None Returns: Type Description ProjectRunsResponsePayload Details of all the retrieved runs. Source code in prefect_hex/project.py @task async def get_project_runs ( project_id : str , hex_credentials : HexCredentials , limit : Optional [ models . PageSize ] = None , offset : Optional [ models . Offset ] = None , status_filter : Optional [ models . ProjectRunStatus ] = None , ) -> models . ProjectRunsResponsePayload : # pragma: no cover \"\"\" Get the status of the API-triggered runs of a project. Args: project_id: Project ID to get runs for. hex_credentials: Credentials to use for authentication with Hex. limit: Number of results to fetch per page for paginated requests. offset: Offset for paginated requests. status_filter: Current status of a project run. Returns: Details of all the retrieved runs. \"\"\" # noqa endpoint = f \"/project/ { project_id } /runs\" # noqa params = { \"limit\" : limit , \"offset\" : offset , \"statusFilter\" : status_filter . value if status_filter is not None else None , } response = await execute_endpoint . fn ( endpoint , hex_credentials , http_method = HTTPMethod . GET , params = params , ) contents = _unpack_contents ( response ) return models . ProjectRunsResponsePayload . parse_obj ( contents ) get_run_status async Get the status of a project run. Parameters: Name Type Description Default project_id str Project ID associated with the run to get the status of. required run_id str Run ID of the run to get the status of. required hex_credentials HexCredentials Credentials to use for authentication with Hex. required Returns: Type Description ProjectStatusResponsePayload Information about the requested run. Source code in prefect_hex/project.py @task async def get_run_status ( project_id : str , run_id : str , hex_credentials : HexCredentials , ) -> models . ProjectStatusResponsePayload : # pragma: no cover \"\"\" Get the status of a project run. Args: project_id: Project ID associated with the run to get the status of. run_id: Run ID of the run to get the status of. hex_credentials: Credentials to use for authentication with Hex. Returns: Information about the requested run. \"\"\" # noqa endpoint = f \"/project/ { project_id } /run/ { run_id } \" # noqa response = await execute_endpoint . fn ( endpoint , hex_credentials , http_method = HTTPMethod . GET , ) contents = _unpack_contents ( response ) return models . ProjectStatusResponsePayload . parse_obj ( contents ) run_project async Trigger a run of the latest published version of a project. Parameters: Name Type Description Default project_id str Project ID to run. required hex_credentials HexCredentials Credentials to use for authentication with Hex. required input_params Optional[Dict] Optional input parameter value map for this project run, e.g. {\"text_input_1\": \"Hello World\", \"numeric_input_1\": 123} None dry_run bool If specified, perform a dry run without actually executing the project. False update_cache bool When true, this run will update the cached state of the published app with the latest run results. Additionally, any SQL cells that have caching enabled will be re-executed as part of this run. Note that this cannot be set to true if custom input parameters are provided. False Returns: Type Description ProjectRunResponsePayload Information about the triggered project run. Source code in prefect_hex/project.py @task async def run_project ( project_id : str , hex_credentials : HexCredentials , input_params : Optional [ Dict ] = None , dry_run : bool = False , update_cache : bool = False , ) -> models . ProjectRunResponsePayload : # pragma: no cover \"\"\" Trigger a run of the latest published version of a project. Args: project_id: Project ID to run. hex_credentials: Credentials to use for authentication with Hex. input_params: Optional input parameter value map for this project run, e.g. ``` {\"text_input_1\": \"Hello World\", \"numeric_input_1\": 123} ``` dry_run: If specified, perform a dry run without actually executing the project. update_cache: When true, this run will update the cached state of the published app with the latest run results. Additionally, any SQL cells that have caching enabled will be re-executed as part of this run. Note that this cannot be set to true if custom input parameters are provided. Returns: Information about the triggered project run. \"\"\" # noqa endpoint = f \"/project/ { project_id } /run\" # noqa response = await execute_endpoint . fn ( endpoint , hex_credentials , http_method = HTTPMethod . POST , json = models . RunProjectRequestBody ( dryRun = dry_run , inputParams = input_params , updateCache = update_cache ) . dict ( by_alias = True ), ) contents = _unpack_contents ( response ) return models . ProjectRunResponsePayload . parse_obj ( contents ) trigger_project_run_and_wait_for_completion async Flow that triggers a project run and waits for the triggered run to complete. Parameters: Name Type Description Default project_id str Project ID to run. required hex_credentials HexCredentials Credentials to use for authentication with Hex. required input_params Optional[Dict] Optional input parameter value map for this project run, e.g. {\"text_input_1\": \"Hello World\", \"numeric_input_1\": 123} None update_cache bool When true, this run will update the cached state of the published app with the latest run results. Additionally, any SQL cells that have caching enabled will be re-executed as part of this run. Note that this cannot be set to true if custom input parameters are provided. False max_wait_seconds int Maximum number of seconds to wait for the entire flow to complete. 900 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 10 Returns: Type Description ProjectRunResponsePayload Information about the triggered project run. Examples: Trigger a Hex project run and wait for completion as a stand-alone flow. import asyncio from prefect_hex import HexCredentials from prefect_hex.project import trigger_project_run_and_wait_for_completion asyncio . run ( trigger_sync_run_and_wait_for_completion ( hex_credentials = HexCredentials ( token = \"1abc0d23-1234-1a2b-abc3-12ab456c7d8e\" ), project_id = \"012345c6-b67c-1234-1b2c-66e4ad07b9f3\" , max_wait_seconds = 1800 , poll_frequency_seconds = 5 , ) ) Trigger a Hex project run and wait for completion as a subflow. from prefect import flow from prefect_hex import HexCredentials from prefect_hex.project import trigger_project_run_and_wait_for_completion @flow def trigger_project_run_and_wait_for_completion_flow ( project_id : str ): hex_credentials = HexCredentials . load ( \"hex-token\" ) project_metadata = trigger_project_run_and_wait_for_completion ( project_id = project_id , hex_credentials = hex_credentials ) return project_metadata trigger_project_run_and_wait_for_completion_flow ( project_id = \"012345c6-b67c-1234-1b2c-66e4ad07b9f3\" ) Source code in prefect_hex/project.py @flow async def trigger_project_run_and_wait_for_completion ( project_id : str , hex_credentials : HexCredentials , input_params : Optional [ Dict ] = None , update_cache : bool = False , max_wait_seconds : int = 900 , poll_frequency_seconds : int = 10 , ) -> models . ProjectRunResponsePayload : \"\"\" Flow that triggers a project run and waits for the triggered run to complete. Args: project_id: Project ID to run. hex_credentials: Credentials to use for authentication with Hex. input_params: Optional input parameter value map for this project run, e.g. ``` {\"text_input_1\": \"Hello World\", \"numeric_input_1\": 123} ``` update_cache: When true, this run will update the cached state of the published app with the latest run results. Additionally, any SQL cells that have caching enabled will be re-executed as part of this run. Note that this cannot be set to true if custom input parameters are provided. max_wait_seconds: Maximum number of seconds to wait for the entire flow to complete. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Returns: Information about the triggered project run. Examples: Trigger a Hex project run and wait for completion as a stand-alone flow. ```python import asyncio from prefect_hex import HexCredentials from prefect_hex.project import trigger_project_run_and_wait_for_completion asyncio.run( trigger_sync_run_and_wait_for_completion( hex_credentials=HexCredentials( token=\"1abc0d23-1234-1a2b-abc3-12ab456c7d8e\" ), project_id=\"012345c6-b67c-1234-1b2c-66e4ad07b9f3\", max_wait_seconds=1800, poll_frequency_seconds=5, ) ) ``` Trigger a Hex project run and wait for completion as a subflow. ```python from prefect import flow from prefect_hex import HexCredentials from prefect_hex.project import trigger_project_run_and_wait_for_completion @flow def trigger_project_run_and_wait_for_completion_flow(project_id: str): hex_credentials = HexCredentials.load(\"hex-token\") project_metadata = trigger_project_run_and_wait_for_completion( project_id=project_id, hex_credentials=hex_credentials ) return project_metadata trigger_project_run_and_wait_for_completion_flow( project_id=\"012345c6-b67c-1234-1b2c-66e4ad07b9f3\" ) ``` \"\"\" logger = get_run_logger () project_run_future = await run_project . submit ( project_id = project_id , hex_credentials = hex_credentials , input_params = input_params , update_cache = update_cache , ) project_run = await project_run_future . result () run_id = project_run . run_id logger . info ( \"Started project %s run %s ; visit %s to view the run.\" , repr ( project_id ), repr ( run_id ), str ( project_run . run_status_url ), ) project_status , project_metadata = await wait_for_project_run_completion ( project_id = project_id , run_id = run_id , hex_credentials = hex_credentials , max_wait_seconds = max_wait_seconds , poll_frequency_seconds = poll_frequency_seconds , ) if project_status == models . ProjectRunStatus . completed : return project_metadata else : raise TERMINAL_STATUS_EXCEPTIONS . get ( project_status , HexProjectRunError )( f \"Project { project_id !r} run { run_id !r} \" f \"was unsuccessful with { project_status . value !r} status\" ) wait_for_project_run_completion async Flow that waits for the triggered project run to complete. Parameters: Name Type Description Default project_id str Project ID to watch. required run_id str Run ID to wait for. required hex_credentials HexCredentials Credentials to use for authentication with Hex. required max_wait_seconds int Maximum number of seconds to wait for the entire flow to complete. 900 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 10 Returns: Type Description Tuple[prefect_hex.models.project.ProjectRunStatus, prefect_hex.models.project.ProjectStatusResponsePayload] The status of the project run and the metadata associated with the run. Examples: Wait for completion of a project run as a subflow. from prefect import flow from prefect_hex import HexCredentials from prefect_hex.project import wait_for_project_run_completion @flow def wait_for_project_run_completion_flow ( project_id : str , run_id : str ): hex_credentials = HexCredentials . load ( \"hex-token\" ) project_status , project_metadata = wait_for_project_run_completion ( project_id = project_id , run_id = run_id , hex_credentials = hex_credentials ) return project_status , project_metadata wait_for_project_run_completion_flow ( project_id = \"012345c6-b67c-1234-1b2c-66e4ad07b9f3\" , run_id = \"654321c6-b67c-1234-1b2c-66e4ad07b9f3\" , ) Source code in prefect_hex/project.py @flow async def wait_for_project_run_completion ( project_id : str , run_id : str , hex_credentials : HexCredentials , max_wait_seconds : int = 900 , poll_frequency_seconds : int = 10 , ) -> Tuple [ models . ProjectRunStatus , models . ProjectStatusResponsePayload ]: \"\"\" Flow that waits for the triggered project run to complete. Args: project_id: Project ID to watch. run_id: Run ID to wait for. hex_credentials: Credentials to use for authentication with Hex. max_wait_seconds: Maximum number of seconds to wait for the entire flow to complete. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Returns: The status of the project run and the metadata associated with the run. Examples: Wait for completion of a project run as a subflow. ```python from prefect import flow from prefect_hex import HexCredentials from prefect_hex.project import wait_for_project_run_completion @flow def wait_for_project_run_completion_flow(project_id: str, run_id: str): hex_credentials = HexCredentials.load(\"hex-token\") project_status, project_metadata = wait_for_project_run_completion( project_id=project_id, run_id=run_id, hex_credentials=hex_credentials ) return project_status, project_metadata wait_for_project_run_completion_flow( project_id=\"012345c6-b67c-1234-1b2c-66e4ad07b9f3\", run_id=\"654321c6-b67c-1234-1b2c-66e4ad07b9f3\", ) ``` \"\"\" logger = get_run_logger () seconds_waited_for_run_completion = 0 wait_for = [] while seconds_waited_for_run_completion <= max_wait_seconds : project_future = await get_run_status . submit ( project_id = project_id , run_id = run_id , hex_credentials = hex_credentials , wait_for = wait_for , ) wait_for = [ project_future ] project_metadata = await project_future . result () project_status = project_metadata . status if project_status in TERMINAL_STATUS_EXCEPTIONS . keys (): return project_status , project_metadata logger . debug ( \"Waiting on project %s run %s with sync status %s for %s seconds\" , repr ( project_id ), repr ( run_id ), repr ( project_status . value ), poll_frequency_seconds , ) await asyncio . sleep ( poll_frequency_seconds ) seconds_waited_for_run_completion += poll_frequency_seconds raise HexProjectRunTimedOut ( f \"Max wait time of { max_wait_seconds } seconds exceeded while waiting \" f \"for project { project_id !r} run { run_id !r} \" )","title":"Project"},{"location":"project/#prefect_hex.project","text":"This is a module containing tasks for interacting with Hex projects","title":"project"},{"location":"project/#prefect_hex.project.cancel_run","text":"Cancel a project run. Parameters: Name Type Description Default project_id str Project ID associated with the run to cancel. required run_id str Run ID of the run to cancel. required hex_credentials HexCredentials Credentials to use for authentication with Hex. required Source code in prefect_hex/project.py @task async def cancel_run ( project_id : str , run_id : str , hex_credentials : HexCredentials , ) -> None : # pragma: no cover \"\"\" Cancel a project run. Args: project_id: Project ID associated with the run to cancel. run_id: Run ID of the run to cancel. hex_credentials: Credentials to use for authentication with Hex. \"\"\" # noqa endpoint = f \"/project/ { project_id } /run/ { run_id } \" # noqa response = await execute_endpoint . fn ( endpoint , hex_credentials , http_method = HTTPMethod . DELETE , ) # Handles any errors returned by the API _unpack_contents ( response )","title":"cancel_run()"},{"location":"project/#prefect_hex.project.get_project_runs","text":"Get the status of the API-triggered runs of a project. Parameters: Name Type Description Default project_id str Project ID to get runs for. required hex_credentials HexCredentials Credentials to use for authentication with Hex. required limit Optional[prefect_hex.models.project.PageSize] Number of results to fetch per page for paginated requests. None offset Optional[prefect_hex.models.project.Offset] Offset for paginated requests. None status_filter Optional[prefect_hex.models.project.ProjectRunStatus] Current status of a project run. None Returns: Type Description ProjectRunsResponsePayload Details of all the retrieved runs. Source code in prefect_hex/project.py @task async def get_project_runs ( project_id : str , hex_credentials : HexCredentials , limit : Optional [ models . PageSize ] = None , offset : Optional [ models . Offset ] = None , status_filter : Optional [ models . ProjectRunStatus ] = None , ) -> models . ProjectRunsResponsePayload : # pragma: no cover \"\"\" Get the status of the API-triggered runs of a project. Args: project_id: Project ID to get runs for. hex_credentials: Credentials to use for authentication with Hex. limit: Number of results to fetch per page for paginated requests. offset: Offset for paginated requests. status_filter: Current status of a project run. Returns: Details of all the retrieved runs. \"\"\" # noqa endpoint = f \"/project/ { project_id } /runs\" # noqa params = { \"limit\" : limit , \"offset\" : offset , \"statusFilter\" : status_filter . value if status_filter is not None else None , } response = await execute_endpoint . fn ( endpoint , hex_credentials , http_method = HTTPMethod . GET , params = params , ) contents = _unpack_contents ( response ) return models . ProjectRunsResponsePayload . parse_obj ( contents )","title":"get_project_runs()"},{"location":"project/#prefect_hex.project.get_run_status","text":"Get the status of a project run. Parameters: Name Type Description Default project_id str Project ID associated with the run to get the status of. required run_id str Run ID of the run to get the status of. required hex_credentials HexCredentials Credentials to use for authentication with Hex. required Returns: Type Description ProjectStatusResponsePayload Information about the requested run. Source code in prefect_hex/project.py @task async def get_run_status ( project_id : str , run_id : str , hex_credentials : HexCredentials , ) -> models . ProjectStatusResponsePayload : # pragma: no cover \"\"\" Get the status of a project run. Args: project_id: Project ID associated with the run to get the status of. run_id: Run ID of the run to get the status of. hex_credentials: Credentials to use for authentication with Hex. Returns: Information about the requested run. \"\"\" # noqa endpoint = f \"/project/ { project_id } /run/ { run_id } \" # noqa response = await execute_endpoint . fn ( endpoint , hex_credentials , http_method = HTTPMethod . GET , ) contents = _unpack_contents ( response ) return models . ProjectStatusResponsePayload . parse_obj ( contents )","title":"get_run_status()"},{"location":"project/#prefect_hex.project.run_project","text":"Trigger a run of the latest published version of a project. Parameters: Name Type Description Default project_id str Project ID to run. required hex_credentials HexCredentials Credentials to use for authentication with Hex. required input_params Optional[Dict] Optional input parameter value map for this project run, e.g. {\"text_input_1\": \"Hello World\", \"numeric_input_1\": 123} None dry_run bool If specified, perform a dry run without actually executing the project. False update_cache bool When true, this run will update the cached state of the published app with the latest run results. Additionally, any SQL cells that have caching enabled will be re-executed as part of this run. Note that this cannot be set to true if custom input parameters are provided. False Returns: Type Description ProjectRunResponsePayload Information about the triggered project run. Source code in prefect_hex/project.py @task async def run_project ( project_id : str , hex_credentials : HexCredentials , input_params : Optional [ Dict ] = None , dry_run : bool = False , update_cache : bool = False , ) -> models . ProjectRunResponsePayload : # pragma: no cover \"\"\" Trigger a run of the latest published version of a project. Args: project_id: Project ID to run. hex_credentials: Credentials to use for authentication with Hex. input_params: Optional input parameter value map for this project run, e.g. ``` {\"text_input_1\": \"Hello World\", \"numeric_input_1\": 123} ``` dry_run: If specified, perform a dry run without actually executing the project. update_cache: When true, this run will update the cached state of the published app with the latest run results. Additionally, any SQL cells that have caching enabled will be re-executed as part of this run. Note that this cannot be set to true if custom input parameters are provided. Returns: Information about the triggered project run. \"\"\" # noqa endpoint = f \"/project/ { project_id } /run\" # noqa response = await execute_endpoint . fn ( endpoint , hex_credentials , http_method = HTTPMethod . POST , json = models . RunProjectRequestBody ( dryRun = dry_run , inputParams = input_params , updateCache = update_cache ) . dict ( by_alias = True ), ) contents = _unpack_contents ( response ) return models . ProjectRunResponsePayload . parse_obj ( contents )","title":"run_project()"},{"location":"project/#prefect_hex.project.trigger_project_run_and_wait_for_completion","text":"Flow that triggers a project run and waits for the triggered run to complete. Parameters: Name Type Description Default project_id str Project ID to run. required hex_credentials HexCredentials Credentials to use for authentication with Hex. required input_params Optional[Dict] Optional input parameter value map for this project run, e.g. {\"text_input_1\": \"Hello World\", \"numeric_input_1\": 123} None update_cache bool When true, this run will update the cached state of the published app with the latest run results. Additionally, any SQL cells that have caching enabled will be re-executed as part of this run. Note that this cannot be set to true if custom input parameters are provided. False max_wait_seconds int Maximum number of seconds to wait for the entire flow to complete. 900 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 10 Returns: Type Description ProjectRunResponsePayload Information about the triggered project run. Examples: Trigger a Hex project run and wait for completion as a stand-alone flow. import asyncio from prefect_hex import HexCredentials from prefect_hex.project import trigger_project_run_and_wait_for_completion asyncio . run ( trigger_sync_run_and_wait_for_completion ( hex_credentials = HexCredentials ( token = \"1abc0d23-1234-1a2b-abc3-12ab456c7d8e\" ), project_id = \"012345c6-b67c-1234-1b2c-66e4ad07b9f3\" , max_wait_seconds = 1800 , poll_frequency_seconds = 5 , ) ) Trigger a Hex project run and wait for completion as a subflow. from prefect import flow from prefect_hex import HexCredentials from prefect_hex.project import trigger_project_run_and_wait_for_completion @flow def trigger_project_run_and_wait_for_completion_flow ( project_id : str ): hex_credentials = HexCredentials . load ( \"hex-token\" ) project_metadata = trigger_project_run_and_wait_for_completion ( project_id = project_id , hex_credentials = hex_credentials ) return project_metadata trigger_project_run_and_wait_for_completion_flow ( project_id = \"012345c6-b67c-1234-1b2c-66e4ad07b9f3\" ) Source code in prefect_hex/project.py @flow async def trigger_project_run_and_wait_for_completion ( project_id : str , hex_credentials : HexCredentials , input_params : Optional [ Dict ] = None , update_cache : bool = False , max_wait_seconds : int = 900 , poll_frequency_seconds : int = 10 , ) -> models . ProjectRunResponsePayload : \"\"\" Flow that triggers a project run and waits for the triggered run to complete. Args: project_id: Project ID to run. hex_credentials: Credentials to use for authentication with Hex. input_params: Optional input parameter value map for this project run, e.g. ``` {\"text_input_1\": \"Hello World\", \"numeric_input_1\": 123} ``` update_cache: When true, this run will update the cached state of the published app with the latest run results. Additionally, any SQL cells that have caching enabled will be re-executed as part of this run. Note that this cannot be set to true if custom input parameters are provided. max_wait_seconds: Maximum number of seconds to wait for the entire flow to complete. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Returns: Information about the triggered project run. Examples: Trigger a Hex project run and wait for completion as a stand-alone flow. ```python import asyncio from prefect_hex import HexCredentials from prefect_hex.project import trigger_project_run_and_wait_for_completion asyncio.run( trigger_sync_run_and_wait_for_completion( hex_credentials=HexCredentials( token=\"1abc0d23-1234-1a2b-abc3-12ab456c7d8e\" ), project_id=\"012345c6-b67c-1234-1b2c-66e4ad07b9f3\", max_wait_seconds=1800, poll_frequency_seconds=5, ) ) ``` Trigger a Hex project run and wait for completion as a subflow. ```python from prefect import flow from prefect_hex import HexCredentials from prefect_hex.project import trigger_project_run_and_wait_for_completion @flow def trigger_project_run_and_wait_for_completion_flow(project_id: str): hex_credentials = HexCredentials.load(\"hex-token\") project_metadata = trigger_project_run_and_wait_for_completion( project_id=project_id, hex_credentials=hex_credentials ) return project_metadata trigger_project_run_and_wait_for_completion_flow( project_id=\"012345c6-b67c-1234-1b2c-66e4ad07b9f3\" ) ``` \"\"\" logger = get_run_logger () project_run_future = await run_project . submit ( project_id = project_id , hex_credentials = hex_credentials , input_params = input_params , update_cache = update_cache , ) project_run = await project_run_future . result () run_id = project_run . run_id logger . info ( \"Started project %s run %s ; visit %s to view the run.\" , repr ( project_id ), repr ( run_id ), str ( project_run . run_status_url ), ) project_status , project_metadata = await wait_for_project_run_completion ( project_id = project_id , run_id = run_id , hex_credentials = hex_credentials , max_wait_seconds = max_wait_seconds , poll_frequency_seconds = poll_frequency_seconds , ) if project_status == models . ProjectRunStatus . completed : return project_metadata else : raise TERMINAL_STATUS_EXCEPTIONS . get ( project_status , HexProjectRunError )( f \"Project { project_id !r} run { run_id !r} \" f \"was unsuccessful with { project_status . value !r} status\" )","title":"trigger_project_run_and_wait_for_completion()"},{"location":"project/#prefect_hex.project.wait_for_project_run_completion","text":"Flow that waits for the triggered project run to complete. Parameters: Name Type Description Default project_id str Project ID to watch. required run_id str Run ID to wait for. required hex_credentials HexCredentials Credentials to use for authentication with Hex. required max_wait_seconds int Maximum number of seconds to wait for the entire flow to complete. 900 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 10 Returns: Type Description Tuple[prefect_hex.models.project.ProjectRunStatus, prefect_hex.models.project.ProjectStatusResponsePayload] The status of the project run and the metadata associated with the run. Examples: Wait for completion of a project run as a subflow. from prefect import flow from prefect_hex import HexCredentials from prefect_hex.project import wait_for_project_run_completion @flow def wait_for_project_run_completion_flow ( project_id : str , run_id : str ): hex_credentials = HexCredentials . load ( \"hex-token\" ) project_status , project_metadata = wait_for_project_run_completion ( project_id = project_id , run_id = run_id , hex_credentials = hex_credentials ) return project_status , project_metadata wait_for_project_run_completion_flow ( project_id = \"012345c6-b67c-1234-1b2c-66e4ad07b9f3\" , run_id = \"654321c6-b67c-1234-1b2c-66e4ad07b9f3\" , ) Source code in prefect_hex/project.py @flow async def wait_for_project_run_completion ( project_id : str , run_id : str , hex_credentials : HexCredentials , max_wait_seconds : int = 900 , poll_frequency_seconds : int = 10 , ) -> Tuple [ models . ProjectRunStatus , models . ProjectStatusResponsePayload ]: \"\"\" Flow that waits for the triggered project run to complete. Args: project_id: Project ID to watch. run_id: Run ID to wait for. hex_credentials: Credentials to use for authentication with Hex. max_wait_seconds: Maximum number of seconds to wait for the entire flow to complete. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Returns: The status of the project run and the metadata associated with the run. Examples: Wait for completion of a project run as a subflow. ```python from prefect import flow from prefect_hex import HexCredentials from prefect_hex.project import wait_for_project_run_completion @flow def wait_for_project_run_completion_flow(project_id: str, run_id: str): hex_credentials = HexCredentials.load(\"hex-token\") project_status, project_metadata = wait_for_project_run_completion( project_id=project_id, run_id=run_id, hex_credentials=hex_credentials ) return project_status, project_metadata wait_for_project_run_completion_flow( project_id=\"012345c6-b67c-1234-1b2c-66e4ad07b9f3\", run_id=\"654321c6-b67c-1234-1b2c-66e4ad07b9f3\", ) ``` \"\"\" logger = get_run_logger () seconds_waited_for_run_completion = 0 wait_for = [] while seconds_waited_for_run_completion <= max_wait_seconds : project_future = await get_run_status . submit ( project_id = project_id , run_id = run_id , hex_credentials = hex_credentials , wait_for = wait_for , ) wait_for = [ project_future ] project_metadata = await project_future . result () project_status = project_metadata . status if project_status in TERMINAL_STATUS_EXCEPTIONS . keys (): return project_status , project_metadata logger . debug ( \"Waiting on project %s run %s with sync status %s for %s seconds\" , repr ( project_id ), repr ( run_id ), repr ( project_status . value ), poll_frequency_seconds , ) await asyncio . sleep ( poll_frequency_seconds ) seconds_waited_for_run_completion += poll_frequency_seconds raise HexProjectRunTimedOut ( f \"Max wait time of { max_wait_seconds } seconds exceeded while waiting \" f \"for project { project_id !r} run { run_id !r} \" )","title":"wait_for_project_run_completion()"},{"location":"rest/","text":"prefect_hex.rest This is a module containing generic REST tasks. HTTPMethod Available HTTP request methods. Source code in prefect_hex/rest.py class HTTPMethod ( Enum ): \"\"\" Available HTTP request methods. \"\"\" GET = \"get\" POST = \"post\" PUT = \"put\" DELETE = \"delete\" PATCH = \"patch\" execute_endpoint async Generic function for executing REST endpoints. Parameters: Name Type Description Default endpoint str The endpoint route. required hex_credentials HexCredentials Credentials to use for authentication with Hex. required http_method HTTPMethod Either GET, POST, PUT, DELETE, or PATCH. <HTTPMethod.GET: 'get'> params Dict[str, Any] URL query parameters in the request. None json Dict[str, Any] JSON serializable object to include in the body of the request. None **kwargs Dict[str, Any] Additional keyword arguments to pass. {} Returns: Type Description Response The httpx.Response from interacting with the endpoint. Examples: Queries project runs for a given project ID. from prefect import flow from prefect_hex import HexCredentials from prefect_hex.rest import execute_endpoint @flow def example_execute_endpoint_flow (): endpoint = f \"/project/5a8591dd-4039-49df-9202-96385ba3eff8/runs\" hex_credentials = HexCredentials ( token = \"a1b2c3d4\" ) params = dict ( limit = 100 ) response = execute_endpoint ( endpoint , hex_credentials , params = params ) return response . json () example_execute_endpoint_flow () Source code in prefect_hex/rest.py @task async def execute_endpoint ( endpoint : str , hex_credentials : \"HexCredentials\" , http_method : HTTPMethod = HTTPMethod . GET , params : Dict [ str , Any ] = None , json : Dict [ str , Any ] = None , ** kwargs : Dict [ str , Any ], ) -> httpx . Response : \"\"\" Generic function for executing REST endpoints. Args: endpoint: The endpoint route. hex_credentials: Credentials to use for authentication with Hex. http_method: Either GET, POST, PUT, DELETE, or PATCH. params: URL query parameters in the request. json: JSON serializable object to include in the body of the request. **kwargs: Additional keyword arguments to pass. Returns: The httpx.Response from interacting with the endpoint. Examples: Queries project runs for a given project ID. ```python from prefect import flow from prefect_hex import HexCredentials from prefect_hex.rest import execute_endpoint @flow def example_execute_endpoint_flow(): endpoint = f\"/project/5a8591dd-4039-49df-9202-96385ba3eff8/runs\" hex_credentials = HexCredentials(token=\"a1b2c3d4\") params = dict(limit=100) response = execute_endpoint(endpoint, hex_credentials, params=params) return response.json() example_execute_endpoint_flow() ``` \"\"\" if isinstance ( http_method , HTTPMethod ): http_method = http_method . value if params is not None : stripped_params = strip_kwargs ( ** params ) else : stripped_params = None if json is not None : kwargs [ \"json\" ] = strip_kwargs ( ** json ) async with hex_credentials . get_client () as client : response = await getattr ( client , http_method )( endpoint , params = stripped_params , ** kwargs ) return response serialize_model Recursively serializes pydantic.BaseModel into JSON; returns original obj if not a BaseModel . Parameters: Name Type Description Default obj Any Input object to serialize. required Returns: Type Description Any Serialized version of object. Source code in prefect_hex/rest.py def serialize_model ( obj : Any ) -> Any : \"\"\" Recursively serializes `pydantic.BaseModel` into JSON; returns original obj if not a `BaseModel`. Args: obj: Input object to serialize. Returns: Serialized version of object. \"\"\" if isinstance ( obj , list ): return [ serialize_model ( o ) for o in obj ] elif isinstance ( obj , Dict ): return { k : serialize_model ( v ) for k , v in obj . items ()} if isinstance ( obj , BaseModel ): obj = obj . dict () return obj strip_kwargs Recursively drops keyword arguments if value is None, and serializes any pydantic.BaseModel types. Parameters: Name Type Description Default **kwargs Dict Input keyword arguments. {} Returns: Type Description Dict Stripped version of kwargs. Source code in prefect_hex/rest.py def strip_kwargs ( ** kwargs : Dict ) -> Dict : \"\"\" Recursively drops keyword arguments if value is None, and serializes any `pydantic.BaseModel` types. Args: **kwargs: Input keyword arguments. Returns: Stripped version of kwargs. \"\"\" stripped_dict = {} for k , v in kwargs . items (): v = serialize_model ( v ) if isinstance ( v , dict ): v = strip_kwargs ( ** v ) if v is not None : stripped_dict [ k ] = v return stripped_dict or {}","title":"Rest"},{"location":"rest/#prefect_hex.rest","text":"This is a module containing generic REST tasks.","title":"rest"},{"location":"rest/#prefect_hex.rest.HTTPMethod","text":"Available HTTP request methods. Source code in prefect_hex/rest.py class HTTPMethod ( Enum ): \"\"\" Available HTTP request methods. \"\"\" GET = \"get\" POST = \"post\" PUT = \"put\" DELETE = \"delete\" PATCH = \"patch\"","title":"HTTPMethod"},{"location":"rest/#prefect_hex.rest.execute_endpoint","text":"Generic function for executing REST endpoints. Parameters: Name Type Description Default endpoint str The endpoint route. required hex_credentials HexCredentials Credentials to use for authentication with Hex. required http_method HTTPMethod Either GET, POST, PUT, DELETE, or PATCH. <HTTPMethod.GET: 'get'> params Dict[str, Any] URL query parameters in the request. None json Dict[str, Any] JSON serializable object to include in the body of the request. None **kwargs Dict[str, Any] Additional keyword arguments to pass. {} Returns: Type Description Response The httpx.Response from interacting with the endpoint. Examples: Queries project runs for a given project ID. from prefect import flow from prefect_hex import HexCredentials from prefect_hex.rest import execute_endpoint @flow def example_execute_endpoint_flow (): endpoint = f \"/project/5a8591dd-4039-49df-9202-96385ba3eff8/runs\" hex_credentials = HexCredentials ( token = \"a1b2c3d4\" ) params = dict ( limit = 100 ) response = execute_endpoint ( endpoint , hex_credentials , params = params ) return response . json () example_execute_endpoint_flow () Source code in prefect_hex/rest.py @task async def execute_endpoint ( endpoint : str , hex_credentials : \"HexCredentials\" , http_method : HTTPMethod = HTTPMethod . GET , params : Dict [ str , Any ] = None , json : Dict [ str , Any ] = None , ** kwargs : Dict [ str , Any ], ) -> httpx . Response : \"\"\" Generic function for executing REST endpoints. Args: endpoint: The endpoint route. hex_credentials: Credentials to use for authentication with Hex. http_method: Either GET, POST, PUT, DELETE, or PATCH. params: URL query parameters in the request. json: JSON serializable object to include in the body of the request. **kwargs: Additional keyword arguments to pass. Returns: The httpx.Response from interacting with the endpoint. Examples: Queries project runs for a given project ID. ```python from prefect import flow from prefect_hex import HexCredentials from prefect_hex.rest import execute_endpoint @flow def example_execute_endpoint_flow(): endpoint = f\"/project/5a8591dd-4039-49df-9202-96385ba3eff8/runs\" hex_credentials = HexCredentials(token=\"a1b2c3d4\") params = dict(limit=100) response = execute_endpoint(endpoint, hex_credentials, params=params) return response.json() example_execute_endpoint_flow() ``` \"\"\" if isinstance ( http_method , HTTPMethod ): http_method = http_method . value if params is not None : stripped_params = strip_kwargs ( ** params ) else : stripped_params = None if json is not None : kwargs [ \"json\" ] = strip_kwargs ( ** json ) async with hex_credentials . get_client () as client : response = await getattr ( client , http_method )( endpoint , params = stripped_params , ** kwargs ) return response","title":"execute_endpoint()"},{"location":"rest/#prefect_hex.rest.serialize_model","text":"Recursively serializes pydantic.BaseModel into JSON; returns original obj if not a BaseModel . Parameters: Name Type Description Default obj Any Input object to serialize. required Returns: Type Description Any Serialized version of object. Source code in prefect_hex/rest.py def serialize_model ( obj : Any ) -> Any : \"\"\" Recursively serializes `pydantic.BaseModel` into JSON; returns original obj if not a `BaseModel`. Args: obj: Input object to serialize. Returns: Serialized version of object. \"\"\" if isinstance ( obj , list ): return [ serialize_model ( o ) for o in obj ] elif isinstance ( obj , Dict ): return { k : serialize_model ( v ) for k , v in obj . items ()} if isinstance ( obj , BaseModel ): obj = obj . dict () return obj","title":"serialize_model()"},{"location":"rest/#prefect_hex.rest.strip_kwargs","text":"Recursively drops keyword arguments if value is None, and serializes any pydantic.BaseModel types. Parameters: Name Type Description Default **kwargs Dict Input keyword arguments. {} Returns: Type Description Dict Stripped version of kwargs. Source code in prefect_hex/rest.py def strip_kwargs ( ** kwargs : Dict ) -> Dict : \"\"\" Recursively drops keyword arguments if value is None, and serializes any `pydantic.BaseModel` types. Args: **kwargs: Input keyword arguments. Returns: Stripped version of kwargs. \"\"\" stripped_dict = {} for k , v in kwargs . items (): v = serialize_model ( v ) if isinstance ( v , dict ): v = strip_kwargs ( ** v ) if v is not None : stripped_dict [ k ] = v return stripped_dict or {}","title":"strip_kwargs()"},{"location":"models/project/","text":"prefect_hex.models.project Offset pydantic-model Source code in prefect_hex/models/project.py class Offset ( BaseModel ): class Config : extra = Extra . allow allow_mutation = False __root__ : int = Field ( default =... , description = \"Offset for paginated requests.\" , ge = 0 ) __root__ : ConstrainedIntValue pydantic-field required special Offset for paginated requests. PageSize pydantic-model Source code in prefect_hex/models/project.py class PageSize ( BaseModel ): class Config : extra = Extra . allow allow_mutation = False __root__ : int = Field ( default =... , description = \"Number of results to fetch per page for paginated requests.\" , ge = 1 , le = 100 , ) __root__ : ConstrainedIntValue pydantic-field required special Number of results to fetch per page for paginated requests. ProjectRunResponsePayload pydantic-model Response format returned by the runProject endpoint. Source code in prefect_hex/models/project.py class ProjectRunResponsePayload ( BaseModel ): \"\"\" Response format returned by the runProject endpoint. \"\"\" class Config : extra = Extra . allow allow_mutation = False project_id : str = Field ( default =... , alias = \"projectId\" , description = \"Unique ID for a Hex project.\" ) run_id : str = Field ( default =... , alias = \"runId\" , description = \"Unique ID for a run of a Hex project.\" ) run_status_url : HttpUrl = Field ( default =... , alias = \"runStatusUrl\" , description = \"URL to query the status of the project run via the Hex API.\" , ) run_url : HttpUrl = Field ( default =... , alias = \"runUrl\" , description = \"URL to view the current progress of the project run in the Hex UI.\" , ) trace_id : str = Field ( default =... , alias = \"traceId\" , description = ( \"Hex trace ID to identify an API request. Provide this value to hex support\" \" with any API issues you encounter.\" ), ) project_id : str pydantic-field required Unique ID for a Hex project. run_id : str pydantic-field required Unique ID for a run of a Hex project. run_status_url : HttpUrl pydantic-field required URL to query the status of the project run via the Hex API. run_url : HttpUrl pydantic-field required URL to view the current progress of the project run in the Hex UI. trace_id : str pydantic-field required Hex trace ID to identify an API request. Provide this value to hex support with any API issues you encounter. ProjectRunStatus Current status of a project run. Source code in prefect_hex/models/project.py class ProjectRunStatus ( Enum ): \"\"\" Current status of a project run. \"\"\" pending = \"PENDING\" running = \"RUNNING\" errored = \"ERRORED\" completed = \"COMPLETED\" killed = \"KILLED\" unabletoallocatekernel = \"UNABLE_TO_ALLOCATE_KERNEL\" ProjectRunsResponsePayload pydantic-model Response format returned by the getProjectRuns endpoint. Source code in prefect_hex/models/project.py class ProjectRunsResponsePayload ( BaseModel ): \"\"\" Response format returned by the getProjectRuns endpoint. \"\"\" class Config : extra = Extra . allow allow_mutation = False next_page : Optional [ HttpUrl ] = Field ( None , alias = \"nextPage\" , description = \"URL to fetch the next page of results for a paginated API request.\" , ) previous_page : Optional [ HttpUrl ] = Field ( None , alias = \"previousPage\" , description = \"URL to fetch the previous page of results for a paginated API request.\" , ) runs : List [ ProjectStatusResponsePayload ] = Field ( default =... , description = ( \"Array of run status payloads in the same format returned by the\" \" `GetRunStatus` endpoint.\" ), ) trace_id : str = Field ( default =... , alias = \"traceId\" , description = ( \"Hex trace ID to identify an API request. Provide this value to hex support\" \" with any API issues you encounter.\" ), ) next_page : HttpUrl pydantic-field URL to fetch the next page of results for a paginated API request. previous_page : HttpUrl pydantic-field URL to fetch the previous page of results for a paginated API request. runs : List [ prefect_hex . models . project . ProjectStatusResponsePayload ] pydantic-field required Array of run status payloads in the same format returned by the GetRunStatus endpoint. trace_id : str pydantic-field required Hex trace ID to identify an API request. Provide this value to hex support with any API issues you encounter. ProjectStatusResponsePayload pydantic-model Response format returned by the getRunStatus endpoint Source code in prefect_hex/models/project.py class ProjectStatusResponsePayload ( BaseModel ): \"\"\" Response format returned by the getRunStatus endpoint \"\"\" class Config : extra = Extra . allow allow_mutation = False elapsed_time : float = Field ( default =... , alias = \"elapsedTime\" , description = \"Total elapsed time for the project run in milliseconds.\" , ) end_time : Optional [ datetime ] = Field ( default = None , alias = \"endTime\" , description = \"UTC timestamp of when the project run finished.\" , ) project_id : str = Field ( default =... , alias = \"projectId\" , description = \"Unique ID for a Hex project.\" ) run_id : str = Field ( default =... , alias = \"runId\" , description = \"Unique ID for a run of a Hex project.\" ) run_url : HttpUrl = Field ( default =... , alias = \"runUrl\" , description = \"URL to view the current progress of the project run in the Hex UI.\" , ) start_time : datetime = Field ( default =... , alias = \"startTime\" , description = \"UTC timestamp of when the project run started.\" , ) status : ProjectRunStatus trace_id : str = Field ( default =... , alias = \"traceId\" , description = ( \"Hex trace ID to identify an API request. Provide this value to hex support\" \" with any API issues you encounter.\" ), ) elapsed_time : float pydantic-field required Total elapsed time for the project run in milliseconds. end_time : datetime pydantic-field UTC timestamp of when the project run finished. project_id : str pydantic-field required Unique ID for a Hex project. run_id : str pydantic-field required Unique ID for a run of a Hex project. run_url : HttpUrl pydantic-field required URL to view the current progress of the project run in the Hex UI. start_time : datetime pydantic-field required UTC timestamp of when the project run started. trace_id : str pydantic-field required Hex trace ID to identify an API request. Provide this value to hex support with any API issues you encounter. RunProjectRequestBody pydantic-model Source code in prefect_hex/models/project.py class RunProjectRequestBody ( BaseModel ): class Config : extra = Extra . allow extra = Extra . forbid allow_mutation = False dry_run : Optional [ bool ] = Field ( \"false\" , alias = \"dryRun\" , description = ( \"If specified, perform a dry run without actually executing the project.\" ), ) input_params : Optional [ Dict [ str , Any ]] = Field ( None , alias = \"inputParams\" , description = \"Optional input parameter value map for this project run.\" , example = { \"numeric_input_1\" : 123 , \"text_input_1\" : \"Hello World\" }, ) update_cache : Optional [ bool ] = Field ( \"false\" , alias = \"updateCache\" , description = ( \"When true, this run will update the cached state of the published app with\" \" the latest run results. \\n Additionally, any SQL cells that have caching\" \" enabled will be re-executed as part of this run. Note \\n that this cannot\" \" be set to true if custom input parameters are provided.\" ), ) dry_run : bool pydantic-field If specified, perform a dry run without actually executing the project. input_params : Dict [ str , Any ] pydantic-field Optional input parameter value map for this project run. update_cache : bool pydantic-field When true, this run will update the cached state of the published app with the latest run results. Additionally, any SQL cells that have caching enabled will be re-executed as part of this run. Note that this cannot be set to true if custom input parameters are provided.","title":"Project"},{"location":"models/project/#prefect_hex.models.project","text":"","title":"project"},{"location":"models/project/#prefect_hex.models.project.Offset","text":"Source code in prefect_hex/models/project.py class Offset ( BaseModel ): class Config : extra = Extra . allow allow_mutation = False __root__ : int = Field ( default =... , description = \"Offset for paginated requests.\" , ge = 0 )","title":"Offset"},{"location":"models/project/#prefect_hex.models.project.Offset.__root__","text":"Offset for paginated requests.","title":"__root__"},{"location":"models/project/#prefect_hex.models.project.PageSize","text":"Source code in prefect_hex/models/project.py class PageSize ( BaseModel ): class Config : extra = Extra . allow allow_mutation = False __root__ : int = Field ( default =... , description = \"Number of results to fetch per page for paginated requests.\" , ge = 1 , le = 100 , )","title":"PageSize"},{"location":"models/project/#prefect_hex.models.project.PageSize.__root__","text":"Number of results to fetch per page for paginated requests.","title":"__root__"},{"location":"models/project/#prefect_hex.models.project.ProjectRunResponsePayload","text":"Response format returned by the runProject endpoint. Source code in prefect_hex/models/project.py class ProjectRunResponsePayload ( BaseModel ): \"\"\" Response format returned by the runProject endpoint. \"\"\" class Config : extra = Extra . allow allow_mutation = False project_id : str = Field ( default =... , alias = \"projectId\" , description = \"Unique ID for a Hex project.\" ) run_id : str = Field ( default =... , alias = \"runId\" , description = \"Unique ID for a run of a Hex project.\" ) run_status_url : HttpUrl = Field ( default =... , alias = \"runStatusUrl\" , description = \"URL to query the status of the project run via the Hex API.\" , ) run_url : HttpUrl = Field ( default =... , alias = \"runUrl\" , description = \"URL to view the current progress of the project run in the Hex UI.\" , ) trace_id : str = Field ( default =... , alias = \"traceId\" , description = ( \"Hex trace ID to identify an API request. Provide this value to hex support\" \" with any API issues you encounter.\" ), )","title":"ProjectRunResponsePayload"},{"location":"models/project/#prefect_hex.models.project.ProjectRunResponsePayload.project_id","text":"Unique ID for a Hex project.","title":"project_id"},{"location":"models/project/#prefect_hex.models.project.ProjectRunResponsePayload.run_id","text":"Unique ID for a run of a Hex project.","title":"run_id"},{"location":"models/project/#prefect_hex.models.project.ProjectRunResponsePayload.run_status_url","text":"URL to query the status of the project run via the Hex API.","title":"run_status_url"},{"location":"models/project/#prefect_hex.models.project.ProjectRunResponsePayload.run_url","text":"URL to view the current progress of the project run in the Hex UI.","title":"run_url"},{"location":"models/project/#prefect_hex.models.project.ProjectRunResponsePayload.trace_id","text":"Hex trace ID to identify an API request. Provide this value to hex support with any API issues you encounter.","title":"trace_id"},{"location":"models/project/#prefect_hex.models.project.ProjectRunStatus","text":"Current status of a project run. Source code in prefect_hex/models/project.py class ProjectRunStatus ( Enum ): \"\"\" Current status of a project run. \"\"\" pending = \"PENDING\" running = \"RUNNING\" errored = \"ERRORED\" completed = \"COMPLETED\" killed = \"KILLED\" unabletoallocatekernel = \"UNABLE_TO_ALLOCATE_KERNEL\"","title":"ProjectRunStatus"},{"location":"models/project/#prefect_hex.models.project.ProjectRunsResponsePayload","text":"Response format returned by the getProjectRuns endpoint. Source code in prefect_hex/models/project.py class ProjectRunsResponsePayload ( BaseModel ): \"\"\" Response format returned by the getProjectRuns endpoint. \"\"\" class Config : extra = Extra . allow allow_mutation = False next_page : Optional [ HttpUrl ] = Field ( None , alias = \"nextPage\" , description = \"URL to fetch the next page of results for a paginated API request.\" , ) previous_page : Optional [ HttpUrl ] = Field ( None , alias = \"previousPage\" , description = \"URL to fetch the previous page of results for a paginated API request.\" , ) runs : List [ ProjectStatusResponsePayload ] = Field ( default =... , description = ( \"Array of run status payloads in the same format returned by the\" \" `GetRunStatus` endpoint.\" ), ) trace_id : str = Field ( default =... , alias = \"traceId\" , description = ( \"Hex trace ID to identify an API request. Provide this value to hex support\" \" with any API issues you encounter.\" ), )","title":"ProjectRunsResponsePayload"},{"location":"models/project/#prefect_hex.models.project.ProjectRunsResponsePayload.next_page","text":"URL to fetch the next page of results for a paginated API request.","title":"next_page"},{"location":"models/project/#prefect_hex.models.project.ProjectRunsResponsePayload.previous_page","text":"URL to fetch the previous page of results for a paginated API request.","title":"previous_page"},{"location":"models/project/#prefect_hex.models.project.ProjectRunsResponsePayload.runs","text":"Array of run status payloads in the same format returned by the GetRunStatus endpoint.","title":"runs"},{"location":"models/project/#prefect_hex.models.project.ProjectRunsResponsePayload.trace_id","text":"Hex trace ID to identify an API request. Provide this value to hex support with any API issues you encounter.","title":"trace_id"},{"location":"models/project/#prefect_hex.models.project.ProjectStatusResponsePayload","text":"Response format returned by the getRunStatus endpoint Source code in prefect_hex/models/project.py class ProjectStatusResponsePayload ( BaseModel ): \"\"\" Response format returned by the getRunStatus endpoint \"\"\" class Config : extra = Extra . allow allow_mutation = False elapsed_time : float = Field ( default =... , alias = \"elapsedTime\" , description = \"Total elapsed time for the project run in milliseconds.\" , ) end_time : Optional [ datetime ] = Field ( default = None , alias = \"endTime\" , description = \"UTC timestamp of when the project run finished.\" , ) project_id : str = Field ( default =... , alias = \"projectId\" , description = \"Unique ID for a Hex project.\" ) run_id : str = Field ( default =... , alias = \"runId\" , description = \"Unique ID for a run of a Hex project.\" ) run_url : HttpUrl = Field ( default =... , alias = \"runUrl\" , description = \"URL to view the current progress of the project run in the Hex UI.\" , ) start_time : datetime = Field ( default =... , alias = \"startTime\" , description = \"UTC timestamp of when the project run started.\" , ) status : ProjectRunStatus trace_id : str = Field ( default =... , alias = \"traceId\" , description = ( \"Hex trace ID to identify an API request. Provide this value to hex support\" \" with any API issues you encounter.\" ), )","title":"ProjectStatusResponsePayload"},{"location":"models/project/#prefect_hex.models.project.ProjectStatusResponsePayload.elapsed_time","text":"Total elapsed time for the project run in milliseconds.","title":"elapsed_time"},{"location":"models/project/#prefect_hex.models.project.ProjectStatusResponsePayload.end_time","text":"UTC timestamp of when the project run finished.","title":"end_time"},{"location":"models/project/#prefect_hex.models.project.ProjectStatusResponsePayload.project_id","text":"Unique ID for a Hex project.","title":"project_id"},{"location":"models/project/#prefect_hex.models.project.ProjectStatusResponsePayload.run_id","text":"Unique ID for a run of a Hex project.","title":"run_id"},{"location":"models/project/#prefect_hex.models.project.ProjectStatusResponsePayload.run_url","text":"URL to view the current progress of the project run in the Hex UI.","title":"run_url"},{"location":"models/project/#prefect_hex.models.project.ProjectStatusResponsePayload.start_time","text":"UTC timestamp of when the project run started.","title":"start_time"},{"location":"models/project/#prefect_hex.models.project.ProjectStatusResponsePayload.trace_id","text":"Hex trace ID to identify an API request. Provide this value to hex support with any API issues you encounter.","title":"trace_id"},{"location":"models/project/#prefect_hex.models.project.RunProjectRequestBody","text":"Source code in prefect_hex/models/project.py class RunProjectRequestBody ( BaseModel ): class Config : extra = Extra . allow extra = Extra . forbid allow_mutation = False dry_run : Optional [ bool ] = Field ( \"false\" , alias = \"dryRun\" , description = ( \"If specified, perform a dry run without actually executing the project.\" ), ) input_params : Optional [ Dict [ str , Any ]] = Field ( None , alias = \"inputParams\" , description = \"Optional input parameter value map for this project run.\" , example = { \"numeric_input_1\" : 123 , \"text_input_1\" : \"Hello World\" }, ) update_cache : Optional [ bool ] = Field ( \"false\" , alias = \"updateCache\" , description = ( \"When true, this run will update the cached state of the published app with\" \" the latest run results. \\n Additionally, any SQL cells that have caching\" \" enabled will be re-executed as part of this run. Note \\n that this cannot\" \" be set to true if custom input parameters are provided.\" ), )","title":"RunProjectRequestBody"},{"location":"models/project/#prefect_hex.models.project.RunProjectRequestBody.dry_run","text":"If specified, perform a dry run without actually executing the project.","title":"dry_run"},{"location":"models/project/#prefect_hex.models.project.RunProjectRequestBody.input_params","text":"Optional input parameter value map for this project run.","title":"input_params"},{"location":"models/project/#prefect_hex.models.project.RunProjectRequestBody.update_cache","text":"When true, this run will update the cached state of the published app with the latest run results. Additionally, any SQL cells that have caching enabled will be re-executed as part of this run. Note that this cannot be set to true if custom input parameters are provided.","title":"update_cache"}]}